<?xml version="1.0" encoding="UTF-8"?>
<grammar
  xmlns="http://relaxng.org/ns/structure/1.0" 
  ns="http://alix.casa" 
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
  xml:lang="en"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" 
  xmlns:h="http://www.w3.org/1999/xhtml"
>
  <a:documentation>Alix, schema of xml to ingest in lucene</a:documentation>
  <div xmlns="http://www.w3.org/1999/xhtml">
    <p>
      This Relax-NG schema defines the XML tags understood by Alix to ingest text documents (articles, books…) in a <a href="https://lucene.apache.org/core/">Lucene</a> index.
    </p>
    <p>Let's start by the kind of XML understood by Alix.</p>
    <a:example>
<alix:set xmlns:alix="http://alix.casa">
  <alix:document xml:id="docid1">
    <alix:field name="title" type="text">First document</alix:field>
    <alix:field name="year" type="int" value="2019"/>
    <alix:field name="text" type="text">
      Le petit chat est mort.
    </alix:field>
  </alix:document>
  <alix:document xml:id="docid2">
    <alix:field name="title" type="text">Second document</alix:field>
    <alix:field name="year" type="int" value="2019"/>
    <alix:field name="text" type="text">
      <p>La <i>petite</i> chatte est morte.</p>
    </alix:field>
  </alix:document>
  <alix:book xml:id="bookid1">
    <alix:field name="title" type="text">Book title</alix:field>
    <alix:field name="author" type="facet">Surname, Firstname</alix:field>
    <alix:field name="toc" type="store">
      <ul>
        <li>1) Chapter 1</li>
        <li>2) Chapter 2</li>
      </ul>
    </alix:field>
    <alix:field name="year" type="int" value="2019"/>
    <alix:chapter>
      <!-- Useful metas for an application should be replicated, example facet  -->
      <alix:field name="author" type="facet">Surname, Firstname</alix:field>
      <alix:field name="text" type="xml">
        <p>First chapter text</p>
      </alix:field>
    </alix:chapter>
    <alix:chapter>
      <alix:field name="author" type="facet">Surname, Firstname</alix:field>
      <alix:field name="text" type="xml">
        <p>Second chapter text</p>
      </alix:field>
    </alix:chapter>
  </alix:book>
</alix:set>
    </a:example>
    <p>
As other lucene indexing platforms, Alix borrows some concepts from <a href="https://lucene.apache.org/solr/">Solr</a>,
but also, a less known but older open source product <a href="http://savannah.nongnu.org/projects/sdx/">SDX</a> (2001),
on which worked the creators of Alix.
    </p>
    <p>
Unlike Solr, ElasticSearch or others; Alix does not need a configuration file, closing 
the number, names and types of fields before indexing.
The declaration of fields is done at indexing time, allowing to add fields
when the documents need them.
The user of Alix library knows what he 
has indexed, so he knows what he will find.
    </p>
    <p>
Alix is XML friendly. Contents of fields could be a clean HTML ready to display in a web application,
all Alix analyzers and searching helpers know how to deal with tags and avoid to break them.
    </p>
    <p>
The proposed field types 
are designed to answer to a need, not to replicate Lucene API complexity.
Investigations have been done to offer the best of a Lucene for texts.
    </p>
    <p>
According to Lucene model, there are 3 levels of objects inside Alix.
    </p>
    <ul>
      <li><a:el>field</a:el>, corresponding to a lucene 
        <a href="https://lucene.apache.org/core/8_7_0/core/org/apache/lucene/document/Field.html">Field</a>.
        A field has a name, a type, and a content.
        Alix defines a limited set of types, dedicated to text documents, content depends on type.
      </li>
      <li><a:el>document</a:el>, a set of <a:el>field</a:el>s corresponding to a lucene 
        <a href="https://lucene.apache.org/core/8_7_0/core/org/apache/lucene/document/Document.html">Document</a>
      </li>
      <li><a:el>book</a:el>, a set of <a:el>chapter</a:el>s, 
        corresponding to an advance feature in lucene, allowing to index a group of Document objects,
        with a specefic one used as a cover
        <a href="https://lucene.apache.org/core/8_7_0/core/org/apache/lucene/index/IndexWriter.html#addDocuments-java.lang.Iterable-">IndexReader.addDocuments()</a>.
        A book is a useful unit in Alix for faceting results, or defining a corpus.
        For Lucene, a <a:el>chapter</a:el> is like a document. 
      </li>
    </ul>
  </div>
  <start>
    <a:documentation>The root element could be a single <a:el>document</a:el>, a <a:el>book</a:el>, or 
      a <a:el>set</a:el> (containing <a:el>document</a:el>s and <a:el>book</a:el>s).</a:documentation>
    <choice>
      <ref name="set"/>
      <ref name="book"/>
      <ref name="document"/>
    </choice>
  </start>
  <define name="set">
    <element name="set">
      <a:documentation>A set of <a:el>book</a:el>s or <a:el>document</a:el>s.</a:documentation>
      <oneOrMore>
        <choice>
          <ref name="article"/>
          <ref name="book"/>
          <ref name="document"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="book">
    <element name="book">
      <a:documentation>A set of <a:el>chapter</a:el>s. A book can also contain <a:el>field</a:el>s (ex: title, author, date…).
      There is no inheritance of fields between books and chapters, to avoid non desired replication (ex: a table of contents of a full book).
      A String identifier, unique for the base, is required for a permanent access to a book.
      The identifier of chapters will be automatically calculated by Alix (identifier of book + a counter starting at 001).
      </a:documentation>
      <attribute name="xml:id">
        <a:documentation>String identifier for the book.</a:documentation>
      </attribute>
      <oneOrMore>
        <choice>
          <ref name="field"/>
          <ref name="chapter"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="chapter">
    <element name="chapter">
      <a:documentation>A set of <a:el>field</a:el>s, like a <a:el>document</a:el>, except it has to be inside a <a:el>book</a:el>.</a:documentation>
      <oneOrMore>
        <ref name="field"/>
      </oneOrMore>
    </element>
  </define>
  <define name="article">
    <element name="article">
      <a:documentation>A set of <a:el>field</a:el>s, alias for <a:el>document</a:el>.</a:documentation>
      <oneOrMore>
        <ref name="field"/>
      </oneOrMore>
    </element>
  </define>
  <define name="document">
    <element name="document">
      <a:documentation>A set of <a:el>field</a:el>s.</a:documentation>
      <oneOrMore>
        <ref name="field"/>
      </oneOrMore>
    </element>
  </define>
  <define name="field">
    <choice>
      <ref name="field-text"/>
      <ref name="field-meta"/>
      <ref name="field-store"/>
      <ref name="field-int"/>
      <ref name="field-category"/>
      <ref name="field-facet"/>
    </choice>
  </define>
  <define name="field-text">
    <element name="field">
      <a:documentation>
Text to search with advanced lexical features (lemma, co-occurrences…).
XML tags are allowed, well-formedness is not required, so HTML ready to display could be sent.
Content is also available as a stored field for display, hilite of occurrences found, relevant excerpts.
This type is quite heavy (positions, offsets, term vectors…).
If you need a simple token search, prefer @type="meta".
      </a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>text</value>
      </attribute>
      <ref name="xml"/>
    </element>
  </define>
  <define name="field-meta">
    <element name="field">
      <a:documentation>
Some text (or xml) to search as raw tokens without linguistic features. Is especially useful to search 
in bibliographic records by token.
      </a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>meta</value>
      </attribute>
      <choice>
        <attribute name="value"/>
        <ref name="xml"/>
      </choice>
    </element>
  </define>
  <define name="field-store">
    <element name="field">
      <a:documentation>Content to store (not for search nor sorting), maybe a text value in the @value attribute, or an xml content nested. 
        Stored values can be retrieved in search results (ex: url), or as an annex for a full document view (ex: table of contents).</a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>store</value>
      </attribute>
      <choice>
        <attribute name="value"/>
        <ref name="xml"/>
      </choice>
    </element>
  </define>
  <define name="field-int">
    <element name="field">
      <a:documentation>A signed integer value, unique for a field name by document (ex: date), used for sorting, queries, or retrieve (also available as a stored field).</a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>int</value>
      </attribute>
      <attribute name="value">
        <data type="int"/>
      </attribute>
    </element>
  </define>
  <define name="field-category">
    <element name="field">
      <a:documentation>A term, unique for field name by document (ex: title), used as a classifier (also available for retrieve as a stored field).</a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>category</value>
      </attribute>
      <attribute name="value"/>
    </element>
  </define>
  <define name="field-facet">
    <element name="field">
      <a:documentation>Set of terms by document (ex: author) used as a classifier for the collection (also available for retrieve as a stored field).</a:documentation>
      <ref name="name"/>
      <attribute name="type">
        <value>facet</value>
      </attribute>
      <attribute name="value"/>
    </element>
  </define>
  <define name="name">
    <attribute name="name">
      <a:documentation>Field name is required.</a:documentation>
      <data type="Name"/>
    </attribute>
  </define>
  <define name="xml">
    <oneOrMore>
      <choice>
        <text/>
        <ref name="el"/>
      </choice>
    </oneOrMore>
  </define>
  <define name="el">
    <element>
      <anyName/>
      <zeroOrMore>
        <choice>
          <attribute>
            <anyName/>
          </attribute>
          <text/>
          <ref name="el"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
</grammar>
